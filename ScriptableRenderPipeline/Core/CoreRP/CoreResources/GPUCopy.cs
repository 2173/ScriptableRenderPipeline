// Autogenerated file. Do not edit by hand
using System;
using UnityEngine.Rendering;

namespace UnityEngine.Experimental.Rendering
{
    public class GPUCopy
    {
        ComputeShader m_Shader;
        int k_SampleKernel_xyzw2x_8;
        int k_SampleKernel_xyzw2x_1;

        public GPUCopy(ComputeShader shader)
        {
            m_Shader = shader;
            k_SampleKernel_xyzw2x_8 = m_Shader.FindKernel("KSampleCopy4_1_x_8");
            k_SampleKernel_xyzw2x_1 = m_Shader.FindKernel("KSampleCopy4_1_x_1");
        }

        static readonly int _Result1 = Shader.PropertyToID("_Result1");
        static readonly int _Source4 = Shader.PropertyToID("_Source4");
        public void SampleCopyChannel_xyzw2x(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier target, Vector2 size)
            {
                var kernel = k_SampleKernel_xyzw2x_8;
                var kernelSize = 8;
                if (size.x < 8 || size.y < 8)
                {
                      kernel = k_SampleKernel_xyzw2x_1;
                      kernelSize = 1;
                }
                cmd.SetComputeTextureParam(m_Shader, kernel, _Source4, source);
                cmd.SetComputeTextureParam(m_Shader, kernel, _Result1, target);
                cmd.DispatchCompute(m_Shader, kernel, (int)Mathf.Max((size.x) / kernelSize + 1, 1), (int)Mathf.Max((size.y) / kernelSize + 1, 1), 1);
            }

    }
}
